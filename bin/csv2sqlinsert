#!/usr/bin/env ruby
# author: jdickson

# ChunkPipe
# An IO pipe that provides generic parsing / rewriting 
# of a stream of packets (or lines in a file).
# It passes chunks of packets to a block to be
# the return value of the block is written to the other end of the pipe
# packet delimiter is not removed from packet suffix
module ChunkPipe

  MAX_CHUNK_SIZE = 1000000

  def open(reader, writer, chunk_size, packet_delim, read_timeout=3, &block)
    if chunk_size < 1 || chunk_size > MAX_CHUNK_SIZE
      raise ArgumentError.new "invalid chunk size #{chunk_size.inspect}"
    end
    chunk_idx = 0
    packet_idx = 0
    packets = []
    stopblocking = Thread.new do
      sleep read_timeout
      reader.close # this can raise IOError
      raise IOError.new "ChunkPipe read time out (#{read_timeout}s)"
    end
    while packet = reader.gets(packet_delim) do
      stopblocking.kill if stopblocking.alive?
      packets << packet
      if ((packet_idx+1) % chunk_size == 0)
        yield writer, packets 
        chunk_idx+=1
        packets = []
      end
      packet_idx+=1
      #break if reader.eof?
    end
    yield writer, packets unless packets.empty?
  ensure
    reader.close if reader && !reader.closed?
    writer.close if writer && !writer.closed?
  end

  module_function :open

end


# script: csv2sqlinsert
# todo: optparse
USAGE = "Usage: cat yourdata.csv | #{$0} 1000 yourtable > insert.sql"
if ARGV.length < 2
  puts USAGE
  exit
end
table_name = ARGV[0]
chunk_size = ARGV[1].to_i
pause_sec = (ARGV[2] || 0).to_i
delim="\n"
i = 1
ChunkPipe.open(STDIN, STDOUT, chunk_size, delim) do |out, lines|
  out << "INSERT IGNORE INTO `#{table_name}` VALUES \n"
  lines.each_with_index do |line, idx|
    line = line.strip.gsub('\N', 'NULL')
    out << "(#{line})" << (idx == (lines.length-1) ? "" : ",") << "\n"
  end
  out << ";\n"
  out << "select sleep(#{pause_sec.to_f});\n" if pause_sec != 0
  out << "select 'completed chunk #{i} (#{lines.length} records)' as '';\n"
  i+=1
end

exit 0
